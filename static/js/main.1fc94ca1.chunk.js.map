{"version":3,"sources":["services/HackerNewsService.ts","services/BaseService.ts","utilities/DateHelper.ts","components/CommentCard/CommentCard.tsx","components/CommentCard/CommentCard.hooks.ts","components/StoryCard/StoryCard.tsx","components/StoryCard/StoryCard.hooks.ts","components/Content/Content.tsx","components/Content/Content.hooks.ts","components/Toolbar/Toolbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HackerNewsService","baseUrl","getTopStories","get","getItemById","id","url","fetch","then","response","json","res","enhanceTimeString","date","diffInHours","Date","getTime","toLocaleDateString","fixed","Math","round","CommentCard","props","commentId","useState","comment","setComment","commentTime","setCommentTime","useEffect","time","catch","err","useCommentCard","dead","deleted","className","by","dangerouslySetInnerHTML","__html","text","StoryCardComponent","storyId","index","story","setStory","commentIds","setCommentIds","showComments","setShowComments","storyUrlHostname","setStoryUrlHostname","storyTime","setStoryTime","kids","slice","URL","hostname","toggleComments","useCallback","useStoryCard","title","href","target","rel","score","descendants","onClick","map","k","Content","stories","setStories","useContent","s","idx","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fc94ca1.chunk.js","sourcesContent":["import { Item } from '../models/Item';\nimport { BaseService } from './BaseService';\n\nexport class HackerNewsService extends BaseService {\n    private baseUrl = 'https://hacker-news.firebaseio.com/v0';\n\n    public getTopStories = (): Promise<number[]> => {\n        return this.get(`${this.baseUrl}/topstories.json`);\n    }\n\n    public getItemById = (id: number): Promise<Item> => {\n        return this.get(`${this.baseUrl}/item/${id}.json`);\n    }\n\n}","export abstract class BaseService {\n    protected async get<T>(url: string): Promise<T> {\n        const res = await fetch(url)\n            .then(response => response.json());\n        return res;\n    }\n}","export const enhanceTimeString = (date: Date): string => {\n    const now = new Date();\n    const difference = now.getTime() - date.getTime();\n    const diffInHours = difference / 1000 / 60 / 60;\n    if (diffInHours > 24) {\n        return date.toLocaleDateString();\n    }\n    else if (diffInHours > 1) {\n        const fixed = Math.round(diffInHours);\n        return `${fixed} hour${fixed > 2 ? 's' : ''} ago`;\n    }\n    else {\n        const fixed = Math.round(diffInHours * 60);\n        return `${fixed} minute${fixed > 2 ? 's' : ''} ago`;\n    }\n}","import React from 'react';\nimport { CommentCardProps } from './CommentCard.props';\nimport { useCommentCard } from './CommentCard.hooks';\n\nimport './Comment.css';\n\nexport const CommentCard = (props: CommentCardProps) => {\n    const { comment, commentTime } = useCommentCard(props);\n\n    if (!comment || comment.dead || comment.deleted) {\n        return null;\n    }\n\n    return (\n        <div className=\"comment\">\n            <span className=\"story-subheadline\"><b>{comment.by}</b> {commentTime}</span>\n            <br/>\n            <span dangerouslySetInnerHTML={{ __html: comment?.text ?? \"\" }} />\n        </div>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { Item } from '../../models/Item';\nimport { HackerNewsService } from '../../services/HackerNewsService';\nimport { CommentCardProps } from './CommentCard.props';\nimport { enhanceTimeString } from '../../utilities/DateHelper';\n\nexport const useCommentCard = ({ commentId }: CommentCardProps) => {\n    const [comment, setComment] = useState<Item | undefined>();\n    const [commentTime, setCommentTime] = useState('');\n\n    useEffect(() => {\n        const service = new HackerNewsService()\n        service.getItemById(commentId)\n            .then((res) => {\n                setComment(res);\n                setCommentTime(enhanceTimeString(new Date(res.time * 1000)));\n            })\n            .catch((err) => {\n                // error\n            });\n    }, [commentId]);\n\n    return { comment, commentTime };\n};","import React from 'react';\nimport { StoryCardProps } from './StoryCard.props';\nimport { useStoryCard } from './StoryCard.hooks';\nimport { CommentCard } from '../CommentCard/CommentCard';\n\nimport './StoryCard.css';\n\nexport const StoryCardComponent = (props: StoryCardProps) => {\n    const { story, index, commentIds, showComments, storyUrlHostname, storyTime, toggleComments } = useStoryCard(props);\n\n    if (!story || story.dead || story.deleted) {\n        return null;\n    }\n\n    return (\n        <div className=\"story-card\">\n            <span className=\"story-title\">{index}. {story.title}</span> (<a href={story.url} target=\"_blank\" rel=\"noreferrer\">{storyUrlHostname}</a>)\n            <br/>\n            <span className=\"story-subheadline\">{story.score} points by <b>{story.by}</b> {storyTime} | <b>{story.descendants ?? 0}</b> comments</span>\n            {!!story.descendants && <button onClick={toggleComments}>{showComments ? \"Hide\" : \"Show\"}</button>}\n            <br/>\n            {showComments && commentIds.map((k) => <CommentCard key={`comment_${k}`} commentId={k} />)}\n        </div>\n    );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Item } from '../../models/Item';\nimport { HackerNewsService } from '../../services/HackerNewsService';\nimport { enhanceTimeString } from '../../utilities/DateHelper';\nimport { StoryCardProps } from './StoryCard.props';\n\nexport const useStoryCard = ({ storyId, index }: StoryCardProps) => {\n    const [story, setStory] = useState<Item | undefined>();\n    const [commentIds, setCommentIds] = useState<number[]>([]);\n    const [showComments, setShowComments] = useState(false);\n    const [storyUrlHostname, setStoryUrlHostname] = useState('');\n    const [storyTime, setStoryTime] = useState<string>('');\n\n    useEffect(() => {\n        const service = new HackerNewsService()\n        service.getItemById(storyId)\n            .then((res) => {\n                setStory(res);\n                setCommentIds((res.kids ?? []).slice(0, 20));\n                setStoryUrlHostname(new URL(res.url).hostname);\n                setStoryTime(enhanceTimeString(new Date(res.time * 1000)));\n            })\n            .catch((err) => {\n                // error\n            });\n    }, [storyId]);\n\n    const toggleComments = useCallback(() => {\n        setShowComments(!showComments);\n    }, [showComments]);\n\n    return { story, index, commentIds, showComments, storyUrlHostname, storyTime, toggleComments };\n};","import React from 'react';\nimport { StoryCardComponent } from '../StoryCard/StoryCard';\nimport { useContent } from './Content.hooks';\n\nimport './Content.css';\n\nexport const Content = () => {\n    const { stories } = useContent();\n    return (\n        <div className=\"content-container\">\n            <div className=\"content\">\n                {stories.map((s, idx) => <StoryCardComponent key={`story_${s}`} storyId={s} index={idx + 1} />)}\n            </div>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { HackerNewsService } from '../../services/HackerNewsService';\n\nexport const useContent = () => {\n    const [stories, setStories] = useState<number[]>([]);\n\n    useEffect(() => {\n        const service = new HackerNewsService();\n        service.getTopStories()\n            .then((res) => {\n                setStories(res.slice(0, 10));\n            })\n            .catch((err) => {\n                // error\n            });\n    }, []);\n\n    return { stories };\n};","import React from 'react';\n\nimport './Toolbar.css';\n\nexport const Toolbar = () => {\n    return (\n        <header className=\"toolbar\">\n            <h1>Hacker News</h1>\n        </header>\n    );\n};\n","import React from 'react';\nimport { Content } from './components/Content/Content';\nimport { Toolbar } from './components/Toolbar/Toolbar';\n\nconst App = () => {\n  return (\n    <>\n      <Toolbar />\n      <Content />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}